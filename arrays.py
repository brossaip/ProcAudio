
Notes = [16.35, 17.32, 18.35, 19.45, 20.60, 21.83, 23.12, 24.50, 25.96, 27.50, 29.14, 30.87, 32.70, 34.65, 36.71, 38.89, 41.20, 43.65, 46.25, 49.00, 51.91, 55.00, 58.27, 61.74, 65.41, 69.30, 73.42, 77.78, 82.41, 87.31, 92.50, 98.00, 103.83, 110.00, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185.00, 196.00, 207.65, 220.00, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77, 1046.50, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760.00, 1864.66, 1975.53, 2093.00, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520.00, 3729.31, 3951.07, 4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93, 6644.88, 7040.00, 7458.62, 7902.13]

import numpy as np
import scipy.signal as signal

FreqTall = np.zeros( len(Notes*2) )

FreqTall[0] = 10
for k in range( len(Notes)-1 ):
    FreqTall[ 2*k+1 ] = ( Notes[k] + Notes[k+1] ) / 2.0
    FreqTall[ 2*k+2 ] = FreqTall[ 2*k+1 ] 
FreqTall[ len(2*Notes)-1] = Notes[ -1 ] * 1.1

FreqPas = np.zeros( len(Notes*2) )
for k in range( len(Notes) ):
    FreqPas[ 2*k ] = ( Notes[k] + FreqTall[2*k] ) /2 
    FreqPas[ 2*k+1 ] = ( Notes[k] + FreqTall[2*k+1] ) /2 


FreqTall = [   10.   ,    16.835,    16.835,    17.835,    17.835,    18.9  ,    18.9  ,    20.025,    20.025,    21.215,    21.215,    22.475,    22.475,    23.81 ,    23.81 ,    25.23 ,    25.23 ,    26.73 ,    26.73 ,    28.32 ,    28.32 ,    30.005,    30.005,    31.785,    31.785,    33.675,    33.675,    35.68 ,    35.68 ,    37.8  ,    37.8  ,    40.045,    40.045,    42.425,    42.425,    44.95 ,    44.95 ,    47.625,    47.625,    50.455,    50.455,    53.455,    53.455,    56.635,    56.635,    60.005,    60.005,    63.575,    63.575,    67.355,    67.355,    71.36 ,    71.36 ,    75.6  ,    75.6  ,    80.095,    80.095,    84.86 ,    84.86 ,    89.905,    89.905,    95.25 ,    95.25 ,   100.915,   100.915,   106.915,   106.915,   113.27 ,   113.27 ,   120.005,   120.005,   127.14 ,   127.14 ,   134.7  ,   134.7  ,   142.71 ,   142.71 ,   151.195,   151.195,   160.185,   160.185,   169.71 ,   169.71 ,   179.805,   179.805,   190.5  ,   190.5  ,   201.825,   201.825,   213.825,   213.825,   226.54 ,   226.54 ,   240.01 ,   240.01 ,   254.285,   254.285,   269.405,   269.405,   285.42 ,   285.42 ,   302.395,   302.395,   320.38 ,   320.38 ,   339.43 ,   339.43 ,   359.61 ,   359.61 ,   380.995,   380.995,   403.65 ,   403.65 ,   427.65 ,   427.65 ,   453.08 ,   453.08 ,   480.02 ,   480.02 ,   508.565,   508.565,   538.81 ,   538.81 ,   570.85 ,   570.85 ,   604.79 ,   604.79 ,   640.75 ,   640.75 ,   678.855,   678.855,   719.225,   719.225,   761.99 ,   761.99 ,   807.3  ,   807.3  ,   855.305,   855.305,   906.165,   906.165,   960.05 ,   960.05 ,  1017.135,  1017.135,  1077.615,  1077.615,  1141.695,  1141.695,  1209.585,  1209.585,  1281.51 ,  1281.51 ,  1357.71 ,  1357.71 ,  1438.445,  1438.445,  1523.98 ,  1523.98 ,  1614.6  ,  1614.6  ,  1710.61 ,  1710.61 ,  1812.33 ,  1812.33 ,  1920.095,  1920.095,  2034.265,  2034.265,  2155.23 ,  2155.23 ,  2283.39 ,  2283.39 ,  2419.17 ,  2419.17 ,  2563.02 ,  2563.02 ,  2715.425,  2715.425,  2876.895,  2876.895,  3047.96 ,  3047.96 ,  3229.2  ,  3229.2  ,  3421.22 ,  3421.22 ,  3624.655,  3624.655,  3840.19 ,  3840.19 ,  4068.54 ,  4068.54 ,  4310.465,  4310.465,  4566.775,  4566.775,  4838.33 ,  4838.33 ,  5126.035,  5126.035,  5430.845,  5430.845,  5753.78 ,  5753.78 ,  6095.92 ,  6095.92 ,  6458.405,  6458.405,  6842.44 ,  6842.44 ,  7249.31 ,  7249.31 ,  7680.375,  7680.375,  8692.343]

FreqPas = [   13.175 ,    16.5925,    17.0775,    17.5775,    18.0925,18.625 ,    19.175 ,    19.7375,    20.3125,    20.9075,21.5225,    22.1525,    22.7975,    23.465 ,    24.155 ,24.865 ,    25.595 ,    26.345 ,    27.115 ,    27.91  ,28.73  ,    29.5725,    30.4375,    31.3275,    32.2425,33.1875,    34.1625,    35.165 ,    36.195 ,    37.255 ,38.345 ,    39.4675,    40.6225,    41.8125,    43.0375,44.3   ,    45.6   ,    46.9375,    48.3125,    49.7275,51.1825,    52.6825,    54.2275,    55.8175,    57.4525,59.1375,    60.8725,    62.6575,    64.4925,    66.3825,68.3275,    70.33  ,    72.39  ,    74.51  ,    76.69  ,78.9375,    81.2525,    83.635 ,    86.085 ,    88.6075,91.2025,    93.875 ,    96.625 ,    99.4575,   102.3725, 105.3725,   108.4575,   111.635 ,   114.905 ,   118.2725, 121.7375,   125.305 ,   128.975 ,   132.755 ,   136.645 , 140.65  ,   144.77  ,   149.0125,   153.3775,   157.8725, 162.4975,   167.26  ,   172.16  ,   177.2075,   182.4025, 187.75  ,   193.25  ,   198.9125,   204.7375,   210.7375, 216.9125,   223.27  ,   229.81  ,   236.545 ,   243.475 , 250.6125,   257.9575,   265.5175,   273.2925,   281.3   , 289.54  ,   298.0275,   306.7625,   315.755 ,   325.005 , 334.53  ,   344.33  ,   354.42  ,   364.8   ,   375.4925, 386.4975,   397.825 ,   409.475 ,   421.475 ,   433.825 , 446.54  ,   459.62  ,   473.09  ,   486.95  ,   501.2225, 515.9075,   531.03  ,   546.59  ,   562.61  ,   579.09  , 596.06  ,   613.52  ,   631.5   ,   650.    ,   669.0525, 688.6575,   708.8425,   729.6075,   750.99  ,   772.99  , 795.645 ,   818.955 ,   842.9575,   867.6525,   893.0825, 919.2475,   946.19  ,   973.91  ,  1002.4525,  1031.8175,1062.0575,  1093.1725,  1125.2125,  1158.1775,  1192.1225,1227.0475,  1263.01  ,  1300.01  ,  1338.11  ,  1377.31  ,1417.6775,  1459.2125,  1501.98  ,  1545.98  ,  1591.29  ,1637.91  ,  1685.915 ,  1735.305 ,  1786.165 ,  1838.495 ,1892.3775,  1947.8125,  2004.8975,  2063.6325,  2124.115 ,2186.345 ,  2250.425 ,  2316.355 ,  2384.245 ,  2454.095 ,2526.02  ,  2600.02  ,  2676.2225,  2754.6275,  2835.3625,2918.4275,  3003.96  ,  3091.96  ,  3182.58  ,  3275.82  ,3371.83  ,  3470.61  ,  3572.3275,  3676.9825,  3784.75  ,3895.63  ,  4009.805 ,  4127.275 ,  4248.2375,  4372.6925,4500.8475,  4632.7025,  4768.48  ,  4908.18  ,  5052.0325,5200.0375,  5352.4425,  5509.2475,  5670.715 ,  5836.845 ,6007.915 ,  6183.925 ,  6365.1675,  6551.6425,  6743.66  ,6941.22  ,  7144.655 ,  7353.965 ,  7569.4975,  7791.2525,8297.2365]

a_array = []
b_array = []
Fs_array = []
Rp = 1
As = 42
for k in range( len(Notes)-1 ):
    if Notes[k] < 200:
        Fs = 441
    elif Notes[k] < 2000:
        Fs = 4410
    else:
        Fs = 44100
    Wp = [ FreqPas[2*k] / (Fs/2), FreqPas[2*k+1] / (Fs/2) ]
    Ws = [ FreqTall[2*k] / (Fs/2), FreqTall[2*k+1] / (Fs/2) ]
    b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
    a_array.append(a)
    b_array.append(b)
    Fs_array.append(Fs)

from pylab import plot, show, title, xlabel, ylabel, subplot
from scipy import fft, arange

Fs = 441
Wp = [FreqPas[0]/(Fs/2), FreqPas[1]/(Fs/2)]
Ws = [FreqTall[0]/(Fs/2), FreqTall[1]/(Fs/2)]
Rp = 1
As = 42
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
Ts=1.0/Fs
t=arange(0,1,Ts)
y=np.sin(2*np.pi*10*t)
yf = signal.filtfilt(b,a,y)

# Comprovar que si faig un senyal de 10 Hz de 44100 Fs. Si el sotamostrejo el recupero igual
Fs = 44100
Wp = [FreqPas[0]/(Fs/2), FreqPas[1]/(Fs/2)]
Ws = [FreqTall[0]/(Fs/2), FreqTall[1]/(Fs/2)]
Rp = 1
As = 42
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
Ts=1.0/Fs
t=arange(0,1,Ts)
y=np.sin(2*np.pi*10*t)

# Fem el filtre pas baix del decimate
b,a = signal.cheby1(8,0.05,0.8/100)
ydeci = signal.filtfilt(b,a,y)
yd = ydeci[::100]
yf = signal.filtfilt(b,a,y)
# No es recupera igual, s'ha de fer un filtre pas baix i després reduir el senyal. Un exemple és la funció decimate.m d'octave. Fa un filtre cheby1(8,0.05,0.8/q) a on q és el factor a reduir.
# No veig que hagi de generar aliasing, ho he d'investigar més.
# Ja hi ha el decimate en el signal del python
# S'ha de fer el decimate amb el filtre fir sí que ha anat bé. Ara bé, teòricament no veig perquè agafar mostres de més tard, delmar, ha de crear aliasing. Si el senyal original l'hagués agafat amb el nou període, tindria els mateixos valors.
# Sí que s'ha de fer el decimate perquè posi les freqúències en sintonia, en el lloc que toqui. Altrament només hi ha freqüències molt altes.

# He de comprovar que tot el que he creat, tots els filtres, es comporten bé pels senyals que vull.
import numpy as np; import scipy.signal as signal;from pylab import plot, show, title, xlabel, ylabel, subplot;from scipy import fft, arange
Fs = 441
NotaProvar = 1
Wp = [FreqPas[2*NotaProvar]/(Fs/2), FreqPas[2*NotaProvar+1]/(Fs/2)]
Ws = [FreqTall[2*NotaProvar]/(Fs/2), FreqTall[2*NotaProvar+1]/(Fs/2)]
Rp = 1
As = 42
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
Fs = Fs*100
Ts=1.0/Fs
t=arange(0,1,Ts)
y=np.sin(2*np.pi*Notes[ NotaProvar ]*t)
ydec = signal.decimate(y,100, ftype='fir')
plot(ydec);show()
ydecCycle = np.concatenate( (ydec[::-1],ydec,ydec[::-1]) )
ydecCyclefilt = signal.filtfilt(b,a,ydecCycle)
ydecfilt = ydecCyclefilt[ len(ydec):2*len(ydec)+1 ]
plot(ydecfilt);show()
ydecfilt = signal.filtfilt(b,a,ydec)
plot(ydecfilt);show()
# !!!! El que retorna de senyal el firwin és el numerador, no té numerador i denominador com el iirdesign, així per filtrar-la ha de ser filtfilt(b,1 ó vector d'1s, senyal)
# Un cop comprovats he de crear les constants dels arrays a i b dels filtres. # Crec que l'hauré de crear com a classe perquè quan calculi el valor dels paràmetres del filtre me'ls retorni. No cal que sigui classe, ho puc fer com a funció.

# Fent proves
>>>
FreqTall = [   10.   ,    16.835,    16.835,    17.835,    17.835,    18.9  ,    18.9  ,    20.025,    20.025,    21.215,    21.215,    22.475,    22.475,    23.81 ,    23.81 ,    25.23 ,    25.23 ,    26.73 ,    26.73 ,    28.32 ,    28.32 ,    30.005,    30.005,    31.785,    31.785,    33.675,    33.675,    35.68 ,    35.68 ,    37.8  ,    37.8  ,    40.045,    40.045,    42.425,    42.425,    44.95 ,    44.95 ,    47.625,    47.625,    50.455,    50.455,    53.455,    53.455,    56.635,    56.635,    60.005,    60.005,    63.575,    63.575,    67.355,    67.355,    71.36 ,    71.36 ,    75.6  ,    75.6  ,    80.095,    80.095,    84.86 ,    84.86 ,    89.905,    89.905,    95.25 ,    95.25 ,   100.915,   100.915,   106.915,   106.915,   113.27 ,   113.27 ,   120.005,   120.005,   127.14 ,   127.14 ,   134.7  ,   134.7  ,   142.71 ,   142.71 ,   151.195,   151.195,   160.185,   160.185,   169.71 ,   169.71 ,   179.805,   179.805,   190.5  ,   190.5  ,   201.825,   201.825,   213.825,   213.825,   226.54 ,   226.54 ,   240.01 ,   240.01 ,   254.285,   254.285,   269.405,   269.405,   285.42 ,   285.42 ,   302.395,   302.395,   320.38 ,   320.38 ,   339.43 ,   339.43 ,   359.61 ,   359.61 ,   380.995,   380.995,   403.65 ,   403.65 ,   427.65 ,   427.65 ,   453.08 ,   453.08 ,   480.02 ,   480.02 ,   508.565,   508.565,   538.81 ,   538.81 ,   570.85 ,   570.85 ,   604.79 ,   604.79 ,   640.75 ,   640.75 ,   678.855,   678.855,   719.225,   719.225,   761.99 ,   761.99 ,   807.3  ,   807.3  ,   855.305,   855.305,   906.165,   906.165,   960.05 ,   960.05 ,  1017.135,  1017.135,  1077.615,  1077.615,  1141.695,  1141.695,  1209.585,  1209.585,  1281.51 ,  1281.51 ,  1357.71 ,  1357.71 ,  1438.445,  1438.445,  1523.98 ,  1523.98 ,  1614.6  ,  1614.6  ,  1710.61 ,  1710.61 ,  1812.33 ,  1812.33 ,  1920.095,  1920.095,  2034.265,  2034.265,  2155.23 ,  2155.23 ,  2283.39 ,  2283.39 ,  2419.17 ,  2419.17 ,  2563.02 ,  2563.02 ,  2715.425,  2715.425,  2876.895,  2876.895,  3047.96 ,  3047.96 ,  3229.2  ,  3229.2  ,  3421.22 ,  3421.22 ,  3624.655,  3624.655,  3840.19 ,  3840.19 ,  4068.54 ,  4068.54 ,  4310.465,  4310.465,  4566.775,  4566.775,  4838.33 ,  4838.33 ,  5126.035,  5126.035,  5430.845,  5430.845,  5753.78 ,  5753.78 ,  6095.92 ,  6095.92 ,  6458.405,  6458.405,  6842.44 ,  6842.44 ,  7249.31 ,  7249.31 ,  7680.375,  7680.375,  8692.343]
Notes = [16.35, 17.32, 18.35, 19.45, 20.60, 21.83, 23.12, 24.50, 25.96, 27.50, 29.14, 30.87, 32.70, 34.65, 36.71, 38.89, 41.20, 43.65, 46.25, 49.00, 51.91, 55.00, 58.27, 61.74, 65.41, 69.30, 73.42, 77.78, 82.41, 87.31, 92.50, 98.00, 103.83, 110.00, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185.00, 196.00, 207.65, 220.00, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77, 1046.50, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760.00, 1864.66, 1975.53, 2093.00, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520.00, 3729.31, 3951.07, 4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93, 6644.88, 7040.00, 7458.62, 7902.13]
FreqPas = [   13.175 ,    16.5925,    17.0775,    17.5775,    18.0925,18.625 ,    19.175 ,    19.7375,    20.3125,    20.9075,21.5225,    22.1525,    22.7975,    23.465 ,    24.155 ,24.865 ,    25.595 ,    26.345 ,    27.115 ,    27.91  ,28.73  ,    29.5725,    30.4375,    31.3275,    32.2425,33.1875,    34.1625,    35.165 ,    36.195 ,    37.255 ,38.345 ,    39.4675,    40.6225,    41.8125,    43.0375,44.3   ,    45.6   ,    46.9375,    48.3125,    49.7275,51.1825,    52.6825,    54.2275,    55.8175,    57.4525,59.1375,    60.8725,    62.6575,    64.4925,    66.3825,68.3275,    70.33  ,    72.39  ,    74.51  ,    76.69  ,78.9375,    81.2525,    83.635 ,    86.085 ,    88.6075,91.2025,    93.875 ,    96.625 ,    99.4575,   102.3725, 105.3725,   108.4575,   111.635 ,   114.905 ,   118.2725, 121.7375,   125.305 ,   128.975 ,   132.755 ,   136.645 , 140.65  ,   144.77  ,   149.0125,   153.3775,   157.8725, 162.4975,   167.26  ,   172.16  ,   177.2075,   182.4025, 187.75  ,   193.25  ,   198.9125,   204.7375,   210.7375, 216.9125,   223.27  ,   229.81  ,   236.545 ,   243.475 , 250.6125,   257.9575,   265.5175,   273.2925,   281.3   , 289.54  ,   298.0275,   306.7625,   315.755 ,   325.005 , 334.53  ,   344.33  ,   354.42  ,   364.8   ,   375.4925, 386.4975,   397.825 ,   409.475 ,   421.475 ,   433.825 , 446.54  ,   459.62  ,   473.09  ,   486.95  ,   501.2225, 515.9075,   531.03  ,   546.59  ,   562.61  ,   579.09  , 596.06  ,   613.52  ,   631.5   ,   650.    ,   669.0525, 688.6575,   708.8425,   729.6075,   750.99  ,   772.99  , 795.645 ,   818.955 ,   842.9575,   867.6525,   893.0825, 919.2475,   946.19  ,   973.91  ,  1002.4525,  1031.8175,1062.0575,  1093.1725,  1125.2125,  1158.1775,  1192.1225,1227.0475,  1263.01  ,  1300.01  ,  1338.11  ,  1377.31  ,1417.6775,  1459.2125,  1501.98  ,  1545.98  ,  1591.29  ,1637.91  ,  1685.915 ,  1735.305 ,  1786.165 ,  1838.495 ,1892.3775,  1947.8125,  2004.8975,  2063.6325,  2124.115 ,2186.345 ,  2250.425 ,  2316.355 ,  2384.245 ,  2454.095 ,2526.02  ,  2600.02  ,  2676.2225,  2754.6275,  2835.3625,2918.4275,  3003.96  ,  3091.96  ,  3182.58  ,  3275.82  ,3371.83  ,  3470.61  ,  3572.3275,  3676.9825,  3784.75  ,3895.63  ,  4009.805 ,  4127.275 ,  4248.2375,  4372.6925,4500.8475,  4632.7025,  4768.48  ,  4908.18  ,  5052.0325,5200.0375,  5352.4425,  5509.2475,  5670.715 ,  5836.845 ,6007.915 ,  6183.925 ,  6365.1675,  6551.6425,  6743.66  ,6941.22  ,  7144.655 ,  7353.965 ,  7569.4975,  7791.2525,8297.2365]
import numpy as np; import scipy.signal as signal;from pylab import plot, show, title, xlabel, ylabel, subplot;from scipy import fft, arange
Fs=44100
NotaProvar = 1
Wp = [FreqPas[2*NotaProvar]/(Fs/2), FreqPas[2*NotaProvar+1]/(Fs/2)]
Ws = [FreqTall[2*NotaProvar]/(Fs/2), FreqTall[2*NotaProvar+1]/(Fs/2)]
Rp = 1
As = 42
Wp
[0.0007744897959183674, 0.0007971655328798186]
b,a = signal.iirdesign( Wp, Ws, Rp, As, analog=True)
b
array([  7.94499255e-03,   0.00000000e+00,   1.96891788e-08,
         0.00000000e+00,   1.82552247e-14,   0.00000000e+00,
         7.50509216e-21,   0.00000000e+00,   1.15438413e-27])
a
array([  1.00000000e+00,   2.13262111e-05,   2.47036108e-06,
         3.95094912e-11,   2.28802796e-12,   2.43930244e-17,
         9.41648594e-19,   5.01887457e-24,   1.45297068e-25])
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
b,a
(array([ 0.00794473, -0.06355762,  0.22245118, -0.44490177,  0.55612697,
       -0.44490177,  0.22245118, -0.06355762,  0.00794473]), array([  1.        ,  -7.99990862,  27.99938474, -55.99822737,
        69.99716753, -55.99728943,  27.9984468 ,  -7.99950665,   0.999933  ]))
np.pi
3.141592653589793
np.pi*0.3
0.9424777960769379
1.25 / np.pi
0.3978873577297384
a = signal.firwin(40, cutoff = [0.2], window = "hamming")
a
array([-0.00040464, -0.00119976, -0.00189085, -0.00207654, -0.00109611,
        0.00150562,  0.00533057,  0.00875308,  0.00925138,  0.00455159,
       -0.00579866, -0.0191996 , -0.02992233, -0.03058886, -0.01490081,
        0.01938229,  0.06852266,  0.12297038,  0.16984409,  0.1969665 ,
        0.1969665 ,  0.16984409,  0.12297038,  0.06852266,  0.01938229,
       -0.01490081, -0.03058886, -0.02992233, -0.0191996 , -0.00579866,
        0.00455159,  0.00925138,  0.00875308,  0.00533057,  0.00150562,
       -0.00109611, -0.00207654, -0.00189085, -0.00119976, -0.00040464])
len(a)
40
a = signal.firwin(40, cutoff = [0.2,0.20001], window = "hamming")
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "/usr/lib64/python3.3/site-packages/scipy/signal/fir_filter_design.py", line 266, in firwin
    raise ValueError("A filter with an even number of coefficients must "
ValueError: A filter with an even number of coefficients must have zero response at the Nyquist rate.
a = signal.firwin(41, cutoff = [0.2,0.20001], window = "hamming")
a
array([ -8.00000588e-07,  -6.93181956e-07,  -3.17061591e-07,
         4.01815242e-07,   1.35770575e-06,   2.14731045e-06,
         2.18161197e-06,   1.02399813e-06,  -1.22871858e-06,
        -3.78605193e-06,  -5.40000423e-06,  -4.95137163e-06,
        -2.10876961e-06,   2.31324810e-06,   6.55567804e-06,
         8.65269808e-06,   7.37977362e-06,   2.93566615e-06,
        -3.02030821e-06,  -8.04426700e-06,   9.99990800e-01,
        -8.04426700e-06,  -3.02030821e-06,   2.93566615e-06,
         7.37977362e-06,   8.65269808e-06,   6.55567804e-06,
         2.31324810e-06,  -2.10876961e-06,  -4.95137163e-06,
        -5.40000423e-06,  -3.78605193e-06,  -1.22871858e-06,
         1.02399813e-06,   2.18161197e-06,   2.14731045e-06,
         1.35770575e-06,   4.01815242e-07,  -3.17061591e-07,
        -6.93181956e-07,  -8.00000588e-07])
w1,h1 = signal.freqz(b1)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'b1' is not defined
w1,h1 = signal.freqz(a)
plot(a,20*np.log10(np.abs(h1)))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "/usr/lib64/python3.3/site-packages/matplotlib/pyplot.py", line 2987, in plot
    ret = ax.plot(*args, **kwargs)
  File "/usr/lib64/python3.3/site-packages/matplotlib/axes.py", line 4139, in plot
    for line in self._get_lines(*args, **kwargs):
  File "/usr/lib64/python3.3/site-packages/matplotlib/axes.py", line 319, in _grab_next_args
    for seg in self._plot_args(remaining, kwargs):
  File "/usr/lib64/python3.3/site-packages/matplotlib/axes.py", line 297, in _plot_args
    x, y = self._xy_from_xy(x, y)
  File "/usr/lib64/python3.3/site-packages/matplotlib/axes.py", line 239, in _xy_from_xy
    raise ValueError("x and y must have same first dimension")
ValueError: x and y must have same first dimension
sw1
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'sw1' is not defined
w1
array([ 0.        ,  0.00613592,  0.01227185,  0.01840777,  0.02454369,
        0.03067962,  0.03681554,  0.04295146,  0.04908739,  0.05522331,
        0.06135923,  0.06749515,  0.07363108,  0.079767  ,  0.08590292,
        0.09203885,  0.09817477,  0.10431069,  0.11044662,  0.11658254,
        0.12271846,  0.12885439,  0.13499031,  0.14112623,  0.14726216,
        0.15339808,  0.159534  ,  0.16566993,  0.17180585,  0.17794177,
        0.18407769,  0.19021362,  0.19634954,  0.20248546,  0.20862139,
        0.21475731,  0.22089323,  0.22702916,  0.23316508,  0.239301  ,
        0.24543693,  0.25157285,  0.25770877,  0.2638447 ,  0.26998062,
        0.27611654,  0.28225246,  0.28838839,  0.29452431,  0.30066023,
        0.30679616,  0.31293208,  0.319068  ,  0.32520393,  0.33133985,
        0.33747577,  0.3436117 ,  0.34974762,  0.35588354,  0.36201947,
        0.36815539,  0.37429131,  0.38042724,  0.38656316,  0.39269908,
        0.398835  ,  0.40497093,  0.41110685,  0.41724277,  0.4233787 ,
        0.42951462,  0.43565054,  0.44178647,  0.44792239,  0.45405831,
        0.46019424,  0.46633016,  0.47246608,  0.47860201,  0.48473793,
        0.49087385,  0.49700978,  0.5031457 ,  0.50928162,  0.51541754,
        0.52155347,  0.52768939,  0.53382531,  0.53996124,  0.54609716,
        0.55223308,  0.55836901,  0.56450493,  0.57064085,  0.57677678,
        0.5829127 ,  0.58904862,  0.59518455,  0.60132047,  0.60745639,
        0.61359232,  0.61972824,  0.62586416,  0.63200008,  0.63813601,
        0.64427193,  0.65040785,  0.65654378,  0.6626797 ,  0.66881562,
        0.67495155,  0.68108747,  0.68722339,  0.69335932,  0.69949524,
        0.70563116,  0.71176709,  0.71790301,  0.72403893,  0.73017486,
        0.73631078,  0.7424467 ,  0.74858262,  0.75471855,  0.76085447,
        0.76699039,  0.77312632,  0.77926224,  0.78539816,  0.79153409,
        0.79767001,  0.80380593,  0.80994186,  0.81607778,  0.8222137 ,
        0.82834963,  0.83448555,  0.84062147,  0.84675739,  0.85289332,
        0.85902924,  0.86516516,  0.87130109,  0.87743701,  0.88357293,
        0.88970886,  0.89584478,  0.9019807 ,  0.90811663,  0.91425255,
        0.92038847,  0.9265244 ,  0.93266032,  0.93879624,  0.94493217,
        0.95106809,  0.95720401,  0.96333993,  0.96947586,  0.97561178,
        0.9817477 ,  0.98788363,  0.99401955,  1.00015547,  1.0062914 ,
        1.01242732,  1.01856324,  1.02469917,  1.03083509,  1.03697101,
        1.04310694,  1.04924286,  1.05537878,  1.06151471,  1.06765063,
        1.07378655,  1.07992247,  1.0860584 ,  1.09219432,  1.09833024,
        1.10446617,  1.11060209,  1.11673801,  1.12287394,  1.12900986,
        1.13514578,  1.14128171,  1.14741763,  1.15355355,  1.15968948,
        1.1658254 ,  1.17196132,  1.17809725,  1.18423317,  1.19036909,
        1.19650501,  1.20264094,  1.20877686,  1.21491278,  1.22104871,
        1.22718463,  1.23332055,  1.23945648,  1.2455924 ,  1.25172832,
        1.25786425,  1.26400017,  1.27013609,  1.27627202,  1.28240794,
        1.28854386,  1.29467978,  1.30081571,  1.30695163,  1.31308755,
        1.31922348,  1.3253594 ,  1.33149532,  1.33763125,  1.34376717,
        1.34990309,  1.35603902,  1.36217494,  1.36831086,  1.37444679,
        1.38058271,  1.38671863,  1.39285456,  1.39899048,  1.4051264 ,
        1.41126232,  1.41739825,  1.42353417,  1.42967009,  1.43580602,
        1.44194194,  1.44807786,  1.45421379,  1.46034971,  1.46648563,
        1.47262156,  1.47875748,  1.4848934 ,  1.49102933,  1.49716525,
        1.50330117,  1.5094371 ,  1.51557302,  1.52170894,  1.52784486,
        1.53398079,  1.54011671,  1.54625263,  1.55238856,  1.55852448,
        1.5646604 ,  1.57079633,  1.57693225,  1.58306817,  1.5892041 ,
        1.59534002,  1.60147594,  1.60761187,  1.61374779,  1.61988371,
        1.62601964,  1.63215556,  1.63829148,  1.6444274 ,  1.65056333,
        1.65669925,  1.66283517,  1.6689711 ,  1.67510702,  1.68124294,
        1.68737887,  1.69351479,  1.69965071,  1.70578664,  1.71192256,
        1.71805848,  1.72419441,  1.73033033,  1.73646625,  1.74260218,
        1.7487381 ,  1.75487402,  1.76100994,  1.76714587,  1.77328179,
        1.77941771,  1.78555364,  1.79168956,  1.79782548,  1.80396141,
        1.81009733,  1.81623325,  1.82236918,  1.8285051 ,  1.83464102,
        1.84077695,  1.84691287,  1.85304879,  1.85918471,  1.86532064,
        1.87145656,  1.87759248,  1.88372841,  1.88986433,  1.89600025,
        1.90213618,  1.9082721 ,  1.91440802,  1.92054395,  1.92667987,
        1.93281579,  1.93895172,  1.94508764,  1.95122356,  1.95735949,
        1.96349541,  1.96963133,  1.97576725,  1.98190318,  1.9880391 ,
        1.99417502,  2.00031095,  2.00644687,  2.01258279,  2.01871872,
        2.02485464,  2.03099056,  2.03712649,  2.04326241,  2.04939833,
        2.05553426,  2.06167018,  2.0678061 ,  2.07394203,  2.08007795,
        2.08621387,  2.09234979,  2.09848572,  2.10462164,  2.11075756,
        2.11689349,  2.12302941,  2.12916533,  2.13530126,  2.14143718,
        2.1475731 ,  2.15370903,  2.15984495,  2.16598087,  2.1721168 ,
        2.17825272,  2.18438864,  2.19052457,  2.19666049,  2.20279641,
        2.20893233,  2.21506826,  2.22120418,  2.2273401 ,  2.23347603,
        2.23961195,  2.24574787,  2.2518838 ,  2.25801972,  2.26415564,
        2.27029157,  2.27642749,  2.28256341,  2.28869934,  2.29483526,
        2.30097118,  2.3071071 ,  2.31324303,  2.31937895,  2.32551487,
        2.3316508 ,  2.33778672,  2.34392264,  2.35005857,  2.35619449,
        2.36233041,  2.36846634,  2.37460226,  2.38073818,  2.38687411,
        2.39301003,  2.39914595,  2.40528188,  2.4114178 ,  2.41755372,
        2.42368964,  2.42982557,  2.43596149,  2.44209741,  2.44823334,
        2.45436926,  2.46050518,  2.46664111,  2.47277703,  2.47891295,
        2.48504888,  2.4911848 ,  2.49732072,  2.50345665,  2.50959257,
        2.51572849,  2.52186442,  2.52800034,  2.53413626,  2.54027218,
        2.54640811,  2.55254403,  2.55867995,  2.56481588,  2.5709518 ,
        2.57708772,  2.58322365,  2.58935957,  2.59549549,  2.60163142,
        2.60776734,  2.61390326,  2.62003919,  2.62617511,  2.63231103,
        2.63844696,  2.64458288,  2.6507188 ,  2.65685472,  2.66299065,
        2.66912657,  2.67526249,  2.68139842,  2.68753434,  2.69367026,
        2.69980619,  2.70594211,  2.71207803,  2.71821396,  2.72434988,
        2.7304858 ,  2.73662173,  2.74275765,  2.74889357,  2.7550295 ,
        2.76116542,  2.76730134,  2.77343726,  2.77957319,  2.78570911,
        2.79184503,  2.79798096,  2.80411688,  2.8102528 ,  2.81638873,
        2.82252465,  2.82866057,  2.8347965 ,  2.84093242,  2.84706834,
        2.85320427,  2.85934019,  2.86547611,  2.87161203,  2.87774796,
        2.88388388,  2.8900198 ,  2.89615573,  2.90229165,  2.90842757,
        2.9145635 ,  2.92069942,  2.92683534,  2.93297127,  2.93910719,
        2.94524311,  2.95137904,  2.95751496,  2.96365088,  2.96978681,
        2.97592273,  2.98205865,  2.98819457,  2.9943305 ,  3.00046642,
        3.00660234,  3.01273827,  3.01887419,  3.02501011,  3.03114604,
        3.03728196,  3.04341788,  3.04955381,  3.05568973,  3.06182565,
        3.06796158,  3.0740975 ,  3.08023342,  3.08636935,  3.09250527,
        3.09864119,  3.10477711,  3.11091304,  3.11704896,  3.12318488,
        3.12932081,  3.13545673])
len(w1)
512
len(h1)
512
plot(w1,20*np.log10(np.abs(h1)))
[<matplotlib.lines.Line2D object at 0x7f4843f71b50>]
show()
show()
plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f48325cab10>]
Fs = 441
Wp = [FreqPas[0]/(Fs/2), FreqPas[1]/(Fs/2)]
Ws = [FreqTall[0]/(Fs/2), FreqTall[1]/(Fs/2)]
Rp = 1
As = 42
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
w1,h1 = signal.freqz(b,a)
plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f4836ac6590>]
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip', analog=True)
w1,h1 = signal.freqz(b,a); plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f48369697d0>]
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='bessel')
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "/usr/lib64/python3.3/site-packages/scipy/signal/filter_design.py", line 643, in iirdesign
    "iirfilter function.") % ftype)
ValueError: bessel does not have order selection. Use iirfilter function.
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='cheby2')
w1,h1 = signal.freqz(b,a); plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f4836ada0d0>]
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='butter')
size(b)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'size' is not defined
len(b)
95
w1,h1 = signal.freqz(b,a); plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f48323db210>]
b,a = signal.iirdesign( Wp, Ws, Rp, As, ftype='ellip')
w1,h1 = signal.freqz(b,a); plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f4836a5fb50>]
len(a)
13
a
array([   1.        ,  -11.68690985,   62.86530137, -205.80047444,
        456.64301289, -723.47640109,  839.21160701, -718.11746904,
        449.90319001, -201.26107379,   61.02328947,  -11.26044535,
          0.95637282])
b,a = signal.iirfilter( 20, Wp, Rp, As, ftype='ellip')
a
array([  1.00000000e+00,  -3.90524193e+01,   7.44373370e+02,
        -9.22741345e+03,   8.36306337e+04,  -5.90686242e+05,
         3.38412548e+06,  -1.61626520e+07,   6.56346362e+07,
        -2.30010215e+08,   7.03597678e+08,  -1.89573047e+09,
         4.53131384e+09,  -9.66442513e+09,   1.84779881e+10,
        -3.17895836e+10,   4.93580022e+10,  -6.93229184e+10,
         8.82252781e+10,  -1.01865397e+11,   1.06778572e+11,
        -1.01640421e+11,   8.78360068e+10,  -6.88646203e+10,
         4.89234033e+10,  -3.14400836e+10,   1.82344764e+10,
        -9.51599912e+09,   4.45186778e+09,  -1.85837967e+09,
         6.88211592e+08,  -2.24483504e+08,   6.39160756e+07,
        -1.57046890e+07,   3.28097459e+06,  -5.71416717e+05,
         8.07237143e+04,  -8.88700408e+03,   7.15329050e+02,
        -3.74457556e+01,   9.56740722e-01])
w1,h1 = signal.freqz(b,a); plot(w1,20*np.log10(np.abs(h1)));show()
[<matplotlib.lines.Line2D object at 0x7f4832590bd0>]